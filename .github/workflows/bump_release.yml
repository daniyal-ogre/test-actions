name: Bump Release

on:
  workflow_call:
    inputs:
      skip-version-bump:
        description: 'Skip version bump'
        required: false
        type: boolean
        default: false
      bump_override:
        description: "Override version bump"
        required: false
        type: string
        default: ""
    outputs:
      tag:
        description: "The version tag (new or existing)"
        value: ${{ jobs.bump_release.outputs.tag }}

permissions:
  contents: write

jobs:
  bump_release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set_output.outputs.tag }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags

      - name: Get last version tag
        id: get_tag
        run: |
          TAG=$(git tag --sort=-creatordate | grep '^v' | head -n1 || echo "v0.0.0")
          echo "last_tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Analyze commits
        id: analyze
        if: ${{ !inputs.skip-version-bump }}
        run: |
          BUMP_OVERRIDE="${{ inputs.bump_override }}"
          echo "Bump override: $BUMP_OVERRIDE"

          if [ -n "$BUMP_OVERRIDE" ]; then
            BUMP_TYPE="$BUMP_OVERRIDE"
            echo "Using override: $BUMP_TYPE"
          else
            COMMITS=$(git log ${{ steps.get_tag.outputs.last_tag }}..HEAD --pretty=format:"%s")
            echo "$COMMITS"
            BUMP_TYPE=patch
            if echo "$COMMITS" | grep -iq '\[major\]'; then BUMP_TYPE=major
            elif echo "$COMMITS" | grep -iq '\[minor\]'; then BUMP_TYPE=minor
            fi
          fi

          echo "bump_type=$BUMP_TYPE" >> "$GITHUB_OUTPUT"

      - name: Calculate new version
        id: version
        if: ${{ !inputs.skip-version-bump }}
        run: |
          VERSION="${{ steps.get_tag.outputs.last_tag }}"
          if [ -z "$VERSION" ]; then
            VERSION="v0.0.0"
          fi
          VERSION="${VERSION#v}"  # Remove the leading "v"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          case "${{ steps.analyze.outputs.bump_type }}" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "new_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"

      - name: Create and push tag
        if: ${{ !inputs.skip-version-bump }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "${{ steps.version.outputs.new_tag }}"
          git push origin "${{ steps.version.outputs.new_tag }}"

      - name: Set final output tag
        id: set_output
        run: |
          TAG=${{ steps.version.outputs.new_tag || steps.get_tag.outputs.last_tag }}
          if [ -z "$TAG" ]; then
            echo "Error: TAG is empty. Failing the workflow. If you're skipping version bump, you should have at least one tagged release pre-existing."
            exit 1
          fi
          echo "tag=$TAG"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
